// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  Draft
  InTransit
  Delivered
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  companies Company[] // A user can create multiple companies

  PurchaseOrder   PurchaseOrder[]
  ShippingAddress ShippingAddress[]
}

model Company {
  id             Int      @id @default(autoincrement())
  name           String // Mandatory
  email          String? // Optional
  whatsappNumber String? // Optional
  createdBy      Int // Foreign key to User
  user           User     @relation(fields: [createdBy], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PurchaseOrder {
  id                Int             @id @default(autoincrement())
  purchaseOrderNo   String
  schoolName        String
  billingName       String
  publicationName   String
  status            Boolean
  createdBy         Int // Foreign key to User
  user              User            @relation(fields: [createdBy], references: [id])
  books             Book[] // A purchase order can have multiple books
  shippingAddressId Int // Foreign key to ShippingAddress
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  currentStatus     Status          @default(Draft)
  //Add a new field vendorName but make it optional
  vendorName        String? // Optional
  vendorInvoice     Boolean         @default(false)
}

model Book {
  id              Int           @id @default(autoincrement())
  textbookStd     String
  bookName        String
  code            String?
  qty             Int
  purchaseOrderId Int // Foreign key to PurchaseOrder
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

//Create Shipping Address model
model ShippingAddress {
  id            Int             @id @default(autoincrement())
  address       String
  createdBy     Int // Foreign key to User
  user          User            @relation(fields: [createdBy], references: [id])
  purchaseOrder PurchaseOrder[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
